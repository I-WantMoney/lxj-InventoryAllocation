AWSTemplateFormatVersion: '2010-09-09'
Description: 'RayooTech Inventory Allocation System Infrastructure'

Resources:
  # VPC
  RTVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: 'RT-Inventory-Allocation-VPC'

  # インターネットゲートウェイ
  RTInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: 'RT-Inventory-Allocation-IGW'

  # サブネット
  RTPublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: 'RT-Inventory-Allocation-VPC'
      AvailabilityZone: 'ap-northeast-1a'
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'RT-Inventory-Allocation-Public-Subnet-1'

  # セキュリティグループ
  RTWebSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for RayooTech web servers'
      VpcId: 'RT-Inventory-Allocation-VPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'

  # RDS (PostgreSQL)
  RTRDSInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      Engine: postgres
      EngineVersion: '12.7'
      DBInstanceClass: db.t3.micro
      AllocatedStorage: '20'
      StorageType: gp2
      MultiAZ: false
      PubliclyAccessible: false
      DBName: 'rt_inventory_allocation_db'
      MasterUsername: 'rtadmin'
      MasterUserPassword: 'RayooTech2023!'
      VPCSecurityGroups:
        - 'RT-DB-SecurityGroup'

  # Lambda 関数
  RTLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: 'RTLambdaExecutionPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'

  RTMainLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'RTMainFunction'
      Runtime: 'python3.9'
      Handler: 'main.handler'
      Role: 'RTLambdaExecutionRole'
      Code:
        ZipFile: |
          import os
          from fastapi import FastAPI, Depends
          from sqlalchemy.orm import Session
          from database import SessionLocal, engine
          from models import Base
          from schemas import OrderRequest, InventoryRequest, AllocationRequest
          from allocation import allocate_inventory

          Base.metadata.create_all(bind=engine)

          app = FastAPI()

          def get_db():
              db = SessionLocal()
              try:
                  yield db
              finally:
                  db.close()

          @app.post("/orders")
          def create_order(order: OrderRequest, db: Session = Depends(get_db)):
              # Create order logic

          @app.post("/inventories")
          def create_inventory(inventory: InventoryRequest, db: Session = Depends(get_db)):
              # Create inventory logic

          @app.post("/allocations")
          def allocate(allocation: AllocationRequest, db: Session = Depends(get_db)):
              # Allocate inventory logic

          def handler(event, context):
              # Lambda handler logic
      Environment:
        Variables:
          DB_HOST: 'rt-inventory-allocation-db.abcdefghijkl.ap-northeast-1.rds.amazonaws.com'
          DB_PORT: '5432'
          DB_NAME: 'rt_inventory_allocation_db'
          DB_USER: 'rtadmin'
          DB_PASSWORD: 'RayooTech2023!'

  RTAllocationLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'RTAllocationFunction'
      Runtime: 'python3.9'
      Handler: 'allocation.allocate_inventory'
      Role: 'RTLambdaExecutionRole'
      Code:
        ZipFile: |
          from sqlalchemy.orm import Session
          from models import Order, Inventory, AllocationResult
          from datetime import datetime
          import logging

          logger = logging.getLogger(__name__)
          logger.setLevel(logging.INFO)

          handler = logging.StreamHandler()
          handler.setLevel(logging.INFO)
          formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
          handler.setFormatter(formatter)
          logger.addHandler(handler)

          def allocate_inventory(db: Session, allocation_method: str):
              # Allocation logic

  RTModelsLambdaLayer:
    Type: 'AWS::Lambda::LayerVersion'
    Properties:
      LayerName: 'RTModelsLayer'
      Description: 'RayooTech Models layer'
      Content:
        ZipFile: |
          from sqlalchemy import Column, Integer, String, Date, Float, ForeignKey
          from sqlalchemy.orm import relationship
          from database import Base

          class Order(Base):
              # Order model

          class Inventory(Base):
              # Inventory model

          class AllocationResult(Base):
              # AllocationResult model

  RTDatabaseLambdaLayer:
    Type: 'AWS::Lambda::LayerVersion'
    Properties:
      LayerName: 'RTDatabaseLayer'
      Description: 'RayooTech Database layer'
      Content:
        ZipFile: |
          from sqlalchemy import create_engine
          from sqlalchemy.ext.declarative import declarative_base
          from sqlalchemy.orm import sessionmaker
          import os

          DB_HOST = os.environ.get("DB_HOST")
          DB_PORT = os.environ.get("DB_PORT")
          DB_NAME = os.environ.get("DB_NAME")
          DB_USER = os.environ.get("DB_USER")
          DB_PASSWORD = os.environ.get("DB_PASSWORD")

          SQLALCHEMY_DATABASE_URL = f"postgresql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}"

          engine = create_engine(SQLALCHEMY_DATABASE_URL)
          SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

          Base = declarative_base()

  RTSchemasLambdaLayer:
    Type: 'AWS::Lambda::LayerVersion'
    Properties:
      LayerName: 'RTSchemasLayer'
      Description: 'RayooTech Schemas layer'
      Content:
        ZipFile: |
          from pydantic import BaseModel
          from datetime import datetime
          from typing import List

          class TokenPayload(BaseModel):
              # TokenPayload schema

          class OrderRequest(BaseModel):
              # OrderRequest schema

          class InventoryRequest(BaseModel):
              # InventoryRequest schema

          class AllocationRequest(BaseModel):
              # AllocationRequest schema

          class OrderResponse(BaseModel):
              # OrderResponse schema

          class InventoryResponse(BaseModel):
              # InventoryResponse schema

          class AllocationResultResponse(BaseModel):
              # AllocationResultResponse schema

  # API Gateway
  RTAPIGateway:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: 'RayooTech Inventory Allocation API'
      Description: 'API for RayooTech Inventory Allocation System'

  # API Gateway リソース
  RTOrdersResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: 'RTAPIGateway'
      ParentId: 'RTAPIGateway-RootResourceId'
      PathPart: 'orders'

  RTInventoriesResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: 'RTAPIGateway'
      ParentId: 'RTAPIGateway-RootResourceId'
      PathPart: 'inventories'

  RTAllocateResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: 'RTAPIGateway'
      ParentId: 'RTAPIGateway-RootResourceId'
      PathPart: 'allocate'

  RTAllocationResultsResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: 'RTAPIGateway'
      ParentId: 'RTAPIGateway-RootResourceId'
      PathPart: 'allocation-results'

  # API Gateway メソッド
  # Orders リソースのメソッド
  RTOrdersPostMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: 'RTAPIGateway'
      ResourceId: 'RTOrdersResource'
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 'arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/RTMainLambdaFunction/invocations'

  RTOrdersGetMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: 'RTAPIGateway'
      ResourceId: 'RTOrdersResource'
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 'arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/RTMainLambdaFunction/invocations'

  # Inventories リソースのメソッド
  RTInventoriesPostMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: 'RTAPIGateway'
      ResourceId: 'RTInventoriesResource'
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: 'arn:aws:api

AWSTemplateFormatVersion: '2010-09-09'
Description: 'RayooTech 在庫割当システムのインフラストラクチャ'

# パラメータ記述サンプル:
#   DBHost: 'your-db-host.example.com'
#   DBPort: '5432'
#   DBName: 'your-db-name'
#   DBUser: 'your-db-user'
#   DBPassword: 'your-db-password'
#   DBMasterUser: 'your-db-master-user'
#   DBMasterUserPassword: 'your-db-master-user-password'

AWSTemplateFormatVersion: '2010-09-09'
Description: 'RayooTech 在庫割当システムのインフラストラクチャ'

Parameters:
  # マスターユーザー名をパラメータで定義
  DBMasterUsername:
    Type: String
    Description: 'データベースのマスターユーザー名'
  
  # マスターユーザーパスワードをパラメータで定義し、NoEchoをtrueに設定して値を隠す  
  DBMasterUserPassword:
    Type: String
    NoEcho: true
    Description: 'データベースのマスターユーザーパスワード'

Resources:
  # VPC
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: 'default'
      Tags:
        - Key: 'Name'
          Value: 'RayooTech VPC'

  # インターネットゲートウェイ
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: 'Name'
          Value: 'RayooTech InternetGateway'

  # VPCゲートウェイのアタッチメント  
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # パブリックサブネット
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: 'ap-northeast-1a'
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: 'Name'
          Value: 'RayooTech Public Subnet 1'

  # プライベートサブネット  
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: 'ap-northeast-1a'
      CidrBlock: '10.0.2.0/24'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: 'Name'
          Value: 'RayooTech Private Subnet 1'

  # パブリックルートテーブル
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: 'Name'
          Value: 'RayooTech Public Route Table'

  # パブリックルート
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  # パブリックサブネットのルートテーブル関連付け
  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  # セキュリティグループ
  LambdaSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for Lambda functions'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: '0.0.0.0/0'

  RDSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for RDS'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: '0.0.0.0/0'

  # RDS (PostgreSQL)
  RDSInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: 'rayootech-db'
      DBName: 'rayootechdb'
      Engine: 'postgres'
      EngineVersion: '14.1'
      DBInstanceClass: 'db.t3.micro'
      AllocatedStorage: 20
      StorageType: 'gp2'
      
      # マスターユーザー名にDBMasterUsernameパラメータの値を参照
      MasterUsername: !Ref DBMasterUsername
      
      # マスターユーザーパスワードにDBMasterUserPasswordパラメータの値を参照  
      MasterUserPassword: !Ref DBMasterUserPassword
      
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref RDSSubnetGroup
      PubliclyAccessible: false

  RDSSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: 'Subnet group for RDS'
      SubnetIds:
        - !Ref PrivateSubnet1

  # Cognito ユーザープール
  CognitoUserPool:
    Type: 'AWS::Cognito::UserPool'
    Properties:
      UserPoolName: 'RayooTechUserPool'
      AutoVerifiedAttributes:
        - 'email'
      UsernameAttributes:
        - 'email'
      Schema:
        - Name: 'email'
          AttributeDataType: 'String'
          Required: true
          Mutable: false
        - Name: 'given_name'
          AttributeDataType: 'String'
          Required: true
          Mutable: true
        - Name: 'family_name'
          AttributeDataType: 'String'
          Required: true
          Mutable: true

  # Cognito ユーザープールクライアント
  CognitoUserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: 'RayooTechUserPoolClient'
      GenerateSecret: false
      ExplicitAuthFlows:
        - 'ADMIN_NO_SRP_AUTH'

  # Lambda 実行ロール
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: 'LambdaExecutionPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'rds:*'
                  
                # RDSInstanceのARNを!Subを使って構築し、Resourceプロパティに設定  
                Resource: !Sub 'arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:rayootech-db'

  # Lambda 関数
  MainLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'MainFunction'
      Runtime: 'python3.9'
      Handler: 'main.handler'
      
      # LambdaExecutionRoleのArnを取得し、Roleプロパティに設定
      Role: !GetAtt LambdaExecutionRole.Arn
      
      Code:
        ZipFile: !Sub |
          import os
          from fastapi import FastAPI, Depends
          from sqlalchemy.orm import Session
          from database import SessionLocal, engine
          from models import Base
          from schemas import OrderRequest, InventoryRequest, AllocationRequest
          from allocation import allocate_inventory

          Base.metadata.create_all(bind=engine)

          app = FastAPI()

          def get_db():
              db = SessionLocal()
              try:
                  yield db
              finally:
                  db.close()

          @app.post("/orders")
          def create_order(order: OrderRequest, db: Session = Depends(get_db)):
              # 注文作成ロジック

          @app.post("/inventories")
          def create_inventory(inventory: InventoryRequest, db: Session = Depends(get_db)):
              # 在庫作成ロジック

          @app.post("/allocations")
          def allocate(allocation: AllocationRequest, db: Session = Depends(get_db)):
              # 在庫割当ロジック

          def handler(event, context):
              # Lambda ハンドラーロジック
              
      Environment:
        Variables:
          # RDSInstanceのエンドポイントのアドレスを取得し、DB_HOSTに設定
          DB_HOST: !GetAtt RDSInstance.Endpoint.Address
          
          # RDSInstanceのエンドポイントのポートを取得し、DB_PORTに設定
          DB_PORT: !GetAtt RDSInstance.Endpoint.Port
          
          DB_NAME: 'rayootechdb'
          
          # DBMasterUsernameパラメータの値を参照し、DB_USERに設定
          DB_USER: !Ref DBMasterUsername
          
          # DBMasterUserPasswordパラメータの値を参照し、DB_PASSWORDに設定  
          DB_PASSWORD: !Ref DBMasterUserPassword
          
          # !Subを使ってCognitoユーザープールのJWKSエンドポイントURLを構築し、COGNITO_JWKS_URLに設定
          COGNITO_JWKS_URL: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}/.well-known/jwks.json"
          
          # CognitoUserPoolClientの参照をCOGNITO_AUDIENCEに設定
          COGNITO_AUDIENCE: !Ref CognitoUserPoolClient
          
          # !Subを使ってCognitoユーザープールのイシュアURLを構築し、COGNITO_ISSUERに設定
          COGNITO_ISSUER: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}"
          
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1

  AllocationLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'AllocationFunction'
      Runtime: 'python3.9'
      Handler: 'allocation.allocate_inventory'
      
      # LambdaExecutionRoleのArnを取得し、Roleプロパティに設定
      Role: !GetAtt LambdaExecutionRole.Arn
      
      Code:
        ZipFile: !Sub |
          from sqlalchemy.orm import Session
          from models import Order, Inventory, AllocationResult
          from datetime import datetime
          import logging

          logger = logging.getLogger(__name__)
          logger.setLevel(logging.INFO)

          handler = logging.StreamHandler()
          handler.setLevel(logging.INFO)
          formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
          handler.setFormatter(formatter)
          logger.addHandler(handler)

          def allocate_inventory(order: Order, db: Session):
              # 在庫割当ロジック

          def handler(event, context):
              # Lambda ハンドラーロジック
              
      Environment:
        Variables:
          # RDSInstanceのエンドポイントのアドレスを取得し、DB_HOSTに設定        
          DB_HOST: !GetAtt RDSInstance.Endpoint.Address
          
          # RDSInstanceのエンドポイントのポートを取得し、DB_PORTに設定
          DB_PORT: !GetAtt RDSInstance.Endpoint.Port
          
          DB_NAME: 'rayootechdb'
          
          # DBMasterUsernameパラメータの値を参照し、DB_USERに設定
          DB_USER: !Ref DBMasterUsername
          
          # DBMasterUserPasswordパラメータの値を参照し、DB_PASSWORDに設定
          DB_PASSWORD: !Ref DBMasterUserPassword
          
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1

  # Lambda レイヤー 
  ModelsLambdaLayer:
    Type: 'AWS::Lambda::LayerVersion'
    Properties:
      LayerName: 'ModelsLayer'
      Description: 'Models layer'
      Content:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: 'models.zip'
      CompatibleRuntimes:
        - python3.9

  DatabaseLambdaLayer:
    Type: 'AWS::Lambda::LayerVersion'
    Properties:
      LayerName: 'DatabaseLayer'
      Description: 'Database layer'
      Content:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: 'database.zip'
      CompatibleRuntimes:
        - python3.9

  SchemasLambdaLayer:
    Type: 'AWS::Lambda::LayerVersion'
    Properties:
      LayerName: 'SchemasLayer'
      Description: 'Schemas layer'
      Content:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: 'schemas.zip'
      CompatibleRuntimes:
        - python3.9

  UtilsLambdaLayer:
    Type: 'AWS::Lambda::LayerVersion'
    Properties:
      LayerName: 'UtilsLayer'
      Description: 'Utils layer'
      Content:
        S3Bucket: !Ref LambdaCodeS3Bucket
        S3Key: 'utils.zip'
      CompatibleRuntimes:
        - python3.9

  # API Gateway 
  RayooTechApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: 'RayooTechApi'
      Description: 'RayooTech API'

  RayooTechApiOrdersResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref RayooTechApi
      ParentId: !GetAtt RayooTechApi.RootResourceId
      PathPart: 'orders'

  RayooTechApiOrdersPostMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref RayooTechApi
      ResourceId: !Ref RayooTechApiOrdersResource
      HttpMethod: 'POST'
      AuthorizationType: 'COGNITO_USER_POOLS'
      AuthorizerId: !Ref RayooTechApiAuthorizer
      Integration:
        Type: 'AWS_PROXY'
        IntegrationHttpMethod: 'POST'
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MainLambdaFunction.Arn}/invocations'

  RayooTechApiInventoriesResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref RayooTechApi
      ParentId: !GetAtt RayooTechApi.RootResourceId
      PathPart: 'inventories'

  RayooTechApiInventoriesPostMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref RayooTechApi
      ResourceId: !Ref RayooTechApiInventoriesResource
      HttpMethod: 'POST'
      AuthorizationType: 'COGNITO_USER_POOLS'
      AuthorizerId: !Ref RayooTechApiAuthorizer
      Integration:
        Type: 'AWS_PROXY'
        IntegrationHttpMethod: 'POST'
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MainLambdaFunction.Arn}/invocations'

  RayooTechApiAllocationsResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref RayooTechApi
      ParentId: !GetAtt RayooTechApi.RootResourceId
      PathPart: 'allocations'

  RayooTechApiAllocationsPostMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref RayooTechApi
      ResourceId: !Ref RayooTechApiAllocationsResource
      HttpMethod: 'POST'
      AuthorizationType: 'COGNITO_USER_POOLS'
      AuthorizerId: !Ref RayooTechApiAuthorizer
      Integration:
        Type: 'AWS_PROXY'
        IntegrationHttpMethod: 'POST'
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MainLambdaFunction.Arn}/invocations'

  RayooTechApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - RayooTechApiOrdersPostMethod
      - RayooTechApiInventoriesPostMethod
      - RayooTechApiAllocationsPostMethod
    Properties:
      RestApiId: !Ref RayooTechApi
      StageName: 'prod'

  RayooTechApiAuthorizer:
    Type: 'AWS::ApiGateway::Authorizer'
    Properties:
      RestApiId: !Ref RayooTechApi
      Name: 'RayooTechApiAuthorizer'
      Type: 'COGNITO_USER_POOLS'
      ProviderARNs:
        - !GetAtt CognitoUserPool.Arn
        
  # Lambda 関数の呼び出し権限
  MainLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt MainLambdaFunction.Arn
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RayooTechApi}/*'

  AllocationLambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt AllocationLambdaFunction.Arn
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RayooTechApi}/*'
          

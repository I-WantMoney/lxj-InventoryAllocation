AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation template for inventory allocation system'

Parameters:
  DBHost:
    Type: String
    Description: 'Database host'
  DBPort:
    Type: String
    Description: 'Database port'
  DBName:
    Type: String
    Description: 'Database name'
  DBUser:
    Type: String
    Description: 'Database user'
  DBPassword:
    Type: String
    Description: 'Database password'

Resources:
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: 'LambdaExecutionPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'

  MainLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'MainFunction'
      Runtime: 'python3.9'  # Updated to Python 3.9
      Handler: 'main.handler'
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import os
          from fastapi import FastAPI, Depends
          from sqlalchemy.orm import Session
          from database import SessionLocal, engine
          from models import Base
          from schemas import OrderRequest, InventoryRequest, AllocationRequest
          from allocation import allocate_inventory

          Base.metadata.create_all(bind=engine)

          app = FastAPI()

          def get_db():
              db = SessionLocal()
              try:
                  yield db
              finally:
                  db.close()

          @app.post("/orders")
          def create_order(order: OrderRequest, db: Session = Depends(get_db)):
              # Create order logic

          @app.post("/inventories")
          def create_inventory(inventory: InventoryRequest, db: Session = Depends(get_db)):
              # Create inventory logic

          @app.post("/allocations")
          def allocate(allocation: AllocationRequest, db: Session = Depends(get_db)):
              # Allocate inventory logic

          def handler(event, context):
              # Lambda handler logic
      Environment:
        Variables:
          DB_HOST: !Ref DBHost
          DB_PORT: !Ref DBPort
          DB_NAME: !Ref DBName
          DB_USER: !Ref DBUser
          DB_PASSWORD: !Ref DBPassword

  AllocationLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'AllocationFunction'
      Runtime: 'python3.9'  # Updated to Python 3.9
      Handler: 'allocation.allocate_inventory'
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          from sqlalchemy.orm import Session
          from models import Order, Inventory, AllocationResult
          from datetime import datetime
          import logging

          logger = logging.getLogger(__name__)
          logger.setLevel(logging.INFO)

          handler = logging.StreamHandler()
          handler.setLevel(logging.INFO)
          formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
          handler.setFormatter(formatter)
          logger.addHandler(handler)

          def allocate_inventory(db: Session, allocation_method: str):
              # Allocation logic

  ModelsLambdaLayer:
    Type: 'AWS::Lambda::LayerVersion'
    Properties:
      LayerName: 'ModelsLayer'
      Description: 'Models layer'
      Content:
        ZipFile: |
          from sqlalchemy import Column, Integer, String, Date, Float, ForeignKey
          from sqlalchemy.orm import relationship
          from database import Base

          class Order(Base):
              # Order model

          class Inventory(Base):
              # Inventory model

          class AllocationResult(Base):
              # AllocationResult model

  DatabaseLambdaLayer:
    Type: 'AWS::Lambda::LayerVersion'
    Properties:
      LayerName: 'DatabaseLayer'
      Description: 'Database layer'
      Content:
        ZipFile: |
          from sqlalchemy import create_engine
          from sqlalchemy.ext.declarative import declarative_base
          from sqlalchemy.orm import sessionmaker
          import os

          DB_HOST = os.environ.get("DB_HOST")
          DB_PORT = os.environ.get("DB_PORT")
          DB_NAME = os.environ.get("DB_NAME")
          DB_USER = os.environ.get("DB_USER")
          DB_PASSWORD = os.environ.get("DB_PASSWORD")

          SQLALCHEMY_DATABASE_URL = f"postgresql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}"

          engine = create_engine(SQLALCHEMY_DATABASE_URL)
          SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

          Base = declarative_base()

  SchemasLambdaLayer:
    Type: 'AWS::Lambda::LayerVersion'
    Properties:
      LayerName: 'SchemasLayer'
      Description: 'Schemas layer'
      Content:
        ZipFile: |
          from pydantic import BaseModel
          from datetime import datetime
          from typing import List

          class TokenPayload(BaseModel):
              # TokenPayload schema

          class OrderRequest(BaseModel):
              # OrderRequest schema

          class InventoryRequest(BaseModel):
              # InventoryRequest schema

          class AllocationRequest(BaseModel):
              # AllocationRequest schema

          class OrderResponse(BaseModel):
              # OrderResponse schema

          class InventoryResponse(BaseModel):
              # InventoryResponse schema

          class AllocationResultResponse(BaseModel):
              # AllocationResultResponse schema
